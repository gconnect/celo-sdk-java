plugins {
    id 'maven-publish'
    id 'java-library'
    id 'signing'
}

group 'io.github.gconnect'
version '0.0.2'

repositories {
    mavenCentral()
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}


artifacts {
    archives javadocJar, sourcesJar
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "gconnect"
            name "Glory Agatevure"
            email "agatevureglory@gmail.com"
        }
    }

    scm {
        connection "scm:git:git:github.com/gconnect/celo-sdk-java.git"
        developerConnection "scm:git:ssh://github.com/gconnect/celo-sdk-java.git"
        url "https://github.com/gconnect/celo-sdk-java"
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            groupId 'io.github.gconnect'
            artifactId 'celo-sdk-java'
            version '0.0.2'
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'CELO Java SDK')
                root.appendNode('name', 'CELO Java SDK')
                root.appendNode('url', 'https://github.com/gconnect/celo-sdk-java')
                root.appendNode('inceptionYear', new Date())
                root.children().last() + pomConfig
            }
        }
    }

    repositories {
        maven {
            name = "OSSRH"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username = project.properties["ossrhUsername"]
                password = project.properties["ossrhPassword"]
            }
        }
    }
}

signing {
    sign publishing.publications.mavenPublication
    sign configurations.archives
}

javadoc {
//    if(JavaVersion.current().isJava9Compatible()){
//        options.addBooleanOption('html5', '-quiet')
//    }
    tasks.withType(Javadoc) {
        // The '-quiet' as second argument is actually a hack,
        // since the one paramater addStringOption doesn't seem to
        // work, we extra add '-quiet', which is added anyway by
        // gradle. See https://github.com/gradle/gradle/issues/2354
        // See JDK-8200363 (https://bugs.openjdk.java.net/browse/JDK-8200363)
        // for information about the -Xwerror option.
        failOnError false
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')
    }
}

dependencies {
    api 'org.apache.commons:commons-math3:3.6.1',
            'org.web3j:core:4.6.3'

    implementation 'com.google.guava:guava:29.0-jre',
            'ch.qos.logback:logback-classic:1.2.3'
    testImplementation 'junit:junit:4.13'
}
